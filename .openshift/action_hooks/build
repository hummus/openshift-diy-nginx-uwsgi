#!/bin/bash
# sources:
#   - http://www.philipotoole.com/influxdb-and-grafana-howto
source $OPENSHIFT_REPO_DIR/misc/openshift/func
source $OPENSHIFT_REPO_DIR/misc/openshift/virtualenv


# Try to guess the number of processors from /proc/cpuinfo.
if [ -f /proc/cpuinfo ]; then
    NUMBER_OF_PROCESSORS=$(grep -c ^processor /proc/cpuinfo)
else
    NUMBER_OF_PROCESSORS=1
fi

function check_python() {
    msg_info "Checking for python..."
    if [ -d $PYTHON_DIR ]; then
        msg_success "Checking for python... already installed."
        return
    fi

    msg_info "Installing python $PYTHON_VERSION..."
    cd $OPENSHIFT_TMP_DIR
    wget http://python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz

    tar zxf Python-$PYTHON_VERSION.tgz
    cd Python-$PYTHON_VERSION
    ./configure --prefix=$PYTHON_DIR
    make install -j$NUMBER_OF_PROCESSORS

    check_status $? "Installing python $PYTHON_VERSION..."
}

# virtualenv is already provided by OpenShift
# so we don't need to compile and install it
function check_venv() {
    msg_info "Checking for virtualenv..."
    if [ -d $VIRTUALENV_DIR ]; then
        msg_success "Checking for virtualenv... exists."
        return
    fi

    msg_info "Creating virtualenv..."
    virtualenv --no-site-packages --python="$PYTHON_DIR/bin/python" $VIRTUALENV_DIR
    check_status $? 'Creating virtualenv...'
}

# function check_uwsgi() {
#     msg_info "Checking for uWSGI..."

#     activate_virtualenv
#     if [ -z "$(pip freeze | grep uWSGI)" ]; then
#         msg_info 'Installling uWSGI...'
#         pip install uWSGI
#         check_status $? 'Installling uWSGI...'
#     else
#         msg_success 'Checking for uWSGI... already installed.'
#     fi
#     deactivate    
# }


function check_influxdb() {
    msg_info "Checking for influxdb..."
    if [ -d $INFLUXDB_DIR ]; then
        msg_success "Checking for influxdb... already installed."
        return
    fi
    cd $OPENSHIFT_TMP_DIR
    wget http://s3.amazonaws.com/influxdb/influxdb-${INFLUXDB_VERSION}.amd64.tar.gz
    check_status $? "Download influxdb"

    tar zxf influxdb-${INFLUXDB_VERSION}.amd64.tar.gz
    mv build $INFLUXDB_DIR
}

function check_nginx() {
    msg_info "Checking for nginx..."
    if [ -d $NGINX_DIR ]; then
        msg_success "Checking for nginx... already installed."
        return
    fi

    msg_info "Installing nginx $NGINX_VERSION..."
    cd $OPENSHIFT_TMP_DIR
    wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-${NGINX_PCRE_VERSION}.tar.bz2
    check_status $? "Download pcre..."

    wget http://zlib.net/zlib-${NGINX_ZLIB_VERSION}.tar.gz
    check_status $? "Download zlib..."

    wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
    check_status $? "Download nginx..."

    tar jxf pcre-${NGINX_PCRE_VERSION}.tar.bz2
    tar zxf zlib-${NGINX_ZLIB_VERSION}.tar.gz
    tar zxf nginx-${NGINX_VERSION}.tar.gz
    
    cd nginx-${NGINX_VERSION}
    ./configure --with-zlib=../zlib-$NGINX_ZLIB_VERSION --with-pcre=../pcre-$NGINX_PCRE_VERSION --prefix=$NGINX_DIR
    make install -j$NUMBER_OF_PROCESSORS

    check_status $? "Installing nginx $NGINX_VERSION..."
}

function check_grafana() {
    msg_info "Checking for grafana..."
    if [ -d $INFLUXDB_DIR ]; then
        msg_success "Checking for grafana... already installed."
        return
    fi
    cd $OPENSHIFT_TMP_DIR
    wget GRAFANA_URL=http://grafanarel.s3.amazonaws.com/grafana-${GRAFANA_VERSION}.tar.gz
    check_status $? "Download grafana"

    tar zxf grafana-${GRAFANA_VERSION}.tar.gz
}

function install_requirements() {
    msg_info "Procesing requirements..."
    if [ ! -f $REQUIREMENTS_FILE ]; then
        msg_info "Procesing requirements... not found"
        return
    fi

    activate_virtualenv
    pip install --use-mirrors -r $REQUIREMENTS_FILE
    check_status $? "Procesing requirements..."
    deactivate
}

check_python
check_venv
check_influxdb
install_requirements
